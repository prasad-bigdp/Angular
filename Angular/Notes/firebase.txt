

Add Firebase to Your Project:

Install the AngularFire library by running ng add @angular/fire in your Angular project's root folder.
During the installation, you will be prompted to provide your Firebase project configuration. Copy and paste the configuration from your Firebase console.
Update app.module.ts with Firebase Config:

Open your app.module.ts file.

Import the necessary AngularFire modules and configure them with your Firebase credentials.


// app.module.ts
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

// Import AngularFire modules
import { AngularFireModule } from '@angular/fire';
import { AngularFireAuthModule } from '@angular/fire/auth';
import { AngularFirestoreModule } from '@angular/fire/firestore';

const firebaseConfig = {
  apiKey: 'YOUR_API_KEY',
  authDomain: 'YOUR_AUTH_DOMAIN',
  projectId: 'YOUR_PROJECT_ID',
  storageBucket: 'YOUR_STORAGE_BUCKET',
  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
  appId: 'YOUR_APP_ID',
};

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    AppRoutingModule,
    AngularFireModule.initializeApp(firebaseConfig),
    AngularFireAuthModule,
    AngularFirestoreModule,
  ],
  providers: [],
  bootstrap: [AppComponent],
})
export class AppModule {}
Replace the placeholder values with the actual values from your Firebase project.

Update auth.service.ts with AngularFire:

Update the auth.service.ts file to use AngularFire for authentication.


// auth.service.ts
import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  user$: Observable<any>;

  constructor(private afAuth: AngularFireAuth) {
    this.user$ = this.afAuth.authState;
  }

  async signUp(email: string, password: string): Promise<any> {
    return this.afAuth.createUserWithEmailAndPassword(email, password);
  }

  async signIn(email: string, password: string): Promise<any> {
    return this.afAuth.signInWithEmailAndPassword(email, password);
  }

  async signOut(): Promise<any> {
    return this.afAuth.signOut();
  }
}
Replace Firebase Services and Config:

Wherever you have used Firebase services or configurations, replace them with the AngularFire equivalents.
By following these steps, you'll integrate Firebase with AngularFire into your Angular project. Remember to replace the placeholder Firebase credentials with your actual credentials from the Firebase console.

If you encounter any issues or have further questions, feel free to ask!

I'll guide you through the process step by step.

Setting Up Firebase Authentication:
First, you need to set up Firebase Authentication for your Angular app. Follow these steps:

Go to the Firebase Console.
Create a new project.
Navigate to "Authentication" and enable the sign-in method you want (e.g., Email/Password).
Copy your Firebase project configuration.
Install AngularFire:
Install AngularFire for Angular Firebase integration.

ng add @angular/fire
During the installation, provide your Firebase project configuration.

Implement Authentication Service:
Create an authentication service that interacts with Firebase Authentication.

// auth.service.ts
import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  user$: Observable<any>;

  constructor(private afAuth: AngularFireAuth) {
    this.user$ = this.afAuth.authState;
  }

  async signUp(email: string, password: string): Promise<any> {
    return this.afAuth.createUserWithEmailAndPassword(email, password);
  }

  async signIn(email: string, password: string): Promise<any> {
    return this.afAuth.signInWithEmailAndPassword(email, password);
  }

  async signOut(): Promise<any> {
    return this.afAuth.signOut();
  }
}
Implement Auth Guards:
Create auth guards to protect routes.

// auth.guard.ts
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { AuthService } from './auth.service';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  constructor(private authService: AuthService, private router: Router) {}

  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean> {
    return this.authService.user$.pipe(
      take(1),
      map((user) => {
        if (user) {
          return true;
        } else {
          this.router.navigate(['/login']);
          return false;
        }
      })
    );
  }
}
Implement JWT Authentication:
When a user signs in, generate a JWT token.

// auth.service.ts
import { Injectable } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import { Observable, from } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import firebase from 'firebase/app';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  // ... (previous AuthService code)

  getJwtToken(): Observable<string | null> {
    return this.afAuth.idToken;
  }
}
Implement HTTP Interceptor:
Create an HTTP interceptor to attach the JWT token to outgoing requests.

// jwt.interceptor.ts
import { Injectable } from '@angular/core';
import {
  HttpEvent,
  HttpHandler,
  HttpInterceptor,
  HttpRequest,
} from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthService } from './auth.service';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(
    request: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    return this.authService.getJwtToken().pipe(
      switchMap((token) => {
        if (token) {
          request = request.clone({
            setHeaders: {
              Authorization: `Bearer ${token}`,
            },
          });
        }
        return next.handle(request);
      })
    );
  }
}
Update App Module:
Add the auth guard and HTTP interceptor to your app module.

// app.module.ts
import { AuthGuard } from './auth.guard';
import { JwtInterceptor } from './jwt.interceptor';

@NgModule({
  // ... (previous imports)
  providers: [
    AuthGuard,
    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },
  ],
})
Update Routes:
Protect the routes using the auth guard.

// app-routing.module.ts
import { AuthGuard } from './auth.guard';

const routes: Routes = [
  // ... (previous routes)
  {
    path: 'checkout',
    component: CheckoutComponent,
    canActivate: [AuthGuard],
  },
];
Ensure that you also have routes for login and signup.

This should give you a good starting point for implementing authentication, JWT, and protecting routes in your Angular e-commerce application. Make sure to adapt the code according to your specific requirements and Firebase configuration.

Feel free to ask if you have any questions or need further clarification on any part of the implementation.

